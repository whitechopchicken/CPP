举了一个大象和冰箱的例子。如果要用拷贝构造，比如 A a = b ； 在c++11之前是去new一个a大小的堆内存，然后把
			a的属性逐个赋值给b ； c++11可以用右值操作，也就是直接 A(A&& a) ，this->xxx = a.xxx  a.xxx = nullptr 
			也就是直接把a的逐个属性直接迁移到b里面，在回收a的内存。
		语义移动   std::move(a)    ==>  把a对象的资源当成右值，可以直接迁移到另一个对象。
什么是移动语义：
	对象赋值时， 避免资源的重新分配  == 可以代替深拷贝，避免重新创建对象资源
	实现：	
		触发移动构造 & 移动拷贝构造 
		stl 应用 
		std::unique_ptr 智能指针
		...
什么是完美转发：
	函数模板可以将自己的参数完美的转发给内部调用的其他函数
		完美是指：不仅能准确地转发参数的值，还能保证被转发的参数的左右值属性不变
		实现：1.借用万能引用  auto ，通过引用的方式接收左、右属性的值；
		2.通过std::forward<T>(V) 解引用，将C转化为T类型的左/右值。
	通常是在函数模板中 ，将自己的参数 ***revoke(T &&t)***  完美转发到函数调用的内部，例子代码如下：
void func(int &n){
	cout << "lvalue=" << n <<endl;
}
void func(int && n){
cout<< "rvalue=" <<n<<endl;
}

template<typename T >
void revoke(T &&t){
	func(forward<T>(t));
	//func(t);
}